[TARGET FILE] example-1.cc
::::: id
example-1.cc#1
::::: spelling
independentVariable
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:7:11
::::: comment
(none)
::::: type
const int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#2
::::: spelling
independentFunction
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:8:5
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int independentFunction();
::::: declaration_pretty
int independentFunction();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#3
::::: spelling
Int
::::: kind
typedef_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:9:26
::::: comment
(none)
::::: canonical_type
std::vector<int, std::allocator<int>>
::::: type_alias_chain:[
  {
    "location": "example-1.cc:9:26", 
    "spelling": "Int"
  }, 
  {
    "location": "/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28", 
    "spelling": "std::vector<int>"
  }
]
::::: type_alias_underlying_type
std::vector<int>
==================
::::: id
example-1.cc#4
::::: spelling
MyClass
::::: kind
class_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:12:7
::::: comment
comment for MyClass
::::: specifier
[]
::::: base_clause
[]
::::: POD
False
::::: is_template
False
::::: declaration
class MyClass;
::::: declaration_pretty
class MyClass;
::::: size
48
::::: type
MyClass
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 48
}
::::: is_abstract
True
::::: template_args_list
[]
==================
::::: id
example-1.cc#5
::::: spelling
property1
::::: kind
field_declaration
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:13:6
::::: comment
(none)
::::: static_member
False
::::: access
private
::::: type
int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#6
::::: spelling
method1
::::: kind
method
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:14:14
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
['static']
::::: args_list
[]
::::: access
private
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
void method1();
::::: declaration_pretty
void method1();
::::: return_type
{'spelling': 'void', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#7
::::: spelling
MyClass
::::: kind
constructor
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:17:2
::::: comment
comment for MyClass()
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: constructor_property
['default']
::::: method_property
[]
::::: args_list
[]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
MyClass();
::::: declaration_pretty
MyClass();
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#8
::::: spelling
MyClass
::::: kind
constructor
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:18:2
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: constructor_property
['copy', 'converting']
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'const MyClass&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 48}}, 'arg_spelling': '', 'default_expr': None}]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
MyClass(const MyClass&);
::::: declaration_pretty
MyClass(const MyClass&);
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#9
::::: spelling
MyClass
::::: kind
constructor
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:19:2
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: constructor_property
[]
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'a', 'default_expr': None}, {'type': {'spelling': 'Int', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'Int', 'location': 'example-1.cc:9:26'}, {'spelling': 'std::vector<int>', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28'}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': 24, 'type_alias_underlying_type': 'std::vector<int>', 'canonical_type': {'spelling': 'std::vector<int, std::allocator<int>>', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 24}}}}, 'arg_spelling': 'b', 'default_expr': None}]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
MyClass(int a, Int b);
::::: declaration_pretty
MyClass(int a, Int b);
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#10
::::: spelling
method2
::::: kind
method
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:20:6
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
Int method2();
::::: declaration_pretty
Int method2();
::::: return_type
{'spelling': 'Int', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'Int', 'location': 'example-1.cc:9:26'}, {'spelling': 'std::vector<int>', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28'}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': 24, 'type_alias_underlying_type': 'std::vector<int>', 'canonical_type': {'spelling': 'std::vector<int, std::allocator<int>>', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 24}}}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#11
::::: spelling
MyClass
::::: kind
constructor
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:21:2
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: constructor_property
['move', 'converting']
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'MyClass&&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 48}}, 'arg_spelling': '', 'default_expr': None}]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
MyClass(MyClass&&);
::::: declaration_pretty
MyClass(MyClass&&);
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#12
::::: spelling
operator+
::::: kind
method
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:22:10
::::: comment
(none)
::::: specifier
['noexcept']
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'const MyClass&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 48}}, 'arg_spelling': '', 'default_expr': None}]
::::: access
public
::::: no_throw_guarantee
guaranteed
::::: is_template
False
::::: declaration
MyClass operator+(const MyClass&) noexcept;
::::: declaration_pretty
MyClass operator+(const MyClass&) noexcept;
::::: return_type
{'spelling': 'MyClass', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 48}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#13
::::: spelling
operator int
::::: kind
conversion_function
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:23:2
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
operator int();
::::: declaration_pretty
operator int();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#14
::::: spelling
property2
::::: kind
field_declaration
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:26:6
::::: comment
comment for property2
::::: static_member
False
::::: access
private
::::: type
Int
{
  "canonical_type": {
    "spelling": "std::vector<int, std::allocator<int>>", 
    "type_info": {
      "is_array": false, 
      "is_pointer": false, 
      "is_type_alias": false, 
      "is_type_param": false, 
      "type_size": 24
    }
  }, 
  "is_array": false, 
  "is_function": false, 
  "is_pointer": false, 
  "is_type_alias": true, 
  "is_type_param": false, 
  "type_alias_chain": [
    {
      "location": "example-1.cc:9:26", 
      "spelling": "Int"
    }, 
    {
      "location": "/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28", 
      "spelling": "std::vector<int>"
    }
  ], 
  "type_alias_underlying_type": "std::vector<int>", 
  "type_size": 24
}
::::: POD
False
::::: size
24
==================
::::: id
example-1.cc#15
::::: spelling
propertye3
::::: kind
field_declaration
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:31:14
::::: comment
comment for property 3
still comment for property 3
::::: static_member
False
::::: access
private
::::: type
const float
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#16
::::: spelling
InnerClass
::::: kind
class_declaration
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:33:8
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: POD
True
::::: access
private
::::: is_template
False
::::: declaration
class InnerClass;
::::: declaration_pretty
class InnerClass;
::::: size
8
::::: type
MyClass::InnerClass
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 8
}
::::: is_abstract
False
::::: template_args_list
[]
==================
::::: id
example-1.cc#17
::::: spelling
b
::::: kind
field_declaration
::::: hierarchy
::MyClass::InnerClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:33:8", 
    "spelling": "InnerClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:34:10
::::: comment
(none)
::::: static_member
False
::::: access
private
::::: type
double
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 8
}
::::: POD
True
::::: size
8
==================
::::: id
example-1.cc#18
::::: spelling
method3
::::: kind
method
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:37:15
::::: comment
(none)
::::: specifier
['= 0']
::::: from_macro
None
::::: is_deleted
False
::::: method_property
['const', 'virtual', 'pure_virtual']
::::: args_list
[]
::::: access
private
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
virtual void method3() const = 0;
::::: declaration_pretty
virtual void method3() const = 0;
::::: return_type
{'spelling': 'void', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#19
::::: spelling
fooInClass
::::: kind
function_template
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:39:10
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'T&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'in', 'default_expr': None}]
::::: access
private
::::: no_throw_guarantee
not_guaranteed
::::: is_template
True
::::: declaration
template <typename T>
void fooInClass(T& in);
::::: declaration_pretty
template <typename T>
void fooInClass(T& in);
::::: return_type
{'spelling': 'void', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:39:10', 'template_spelling': 'fooInClass', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}]
==================
::::: id
example-1.cc#20
::::: spelling
baz
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:43:5
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int baz();
::::: declaration_pretty
int baz();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#21
::::: spelling
templateFunc
::::: kind
function_template
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:47:5
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[{'type': {'spelling': 'T*', 'type_info': {'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': False, 'is_pointer': True, 'type_size': None, 'pointee_type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:47:5', 'template_spelling': 'templateFunc', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}}}, 'arg_spelling': 'pt', 'default_expr': None}, {'type': {'spelling': 'U*', 'type_info': {'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': False, 'is_pointer': True, 'type_size': None, 'pointee_type': {'spelling': 'U', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:47:5', 'template_spelling': 'templateFunc', 'param_index': 1}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}}}, 'arg_spelling': 'pu', 'default_expr': None}, {'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'n', 'default_expr': 'N'}]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
True
::::: declaration
template <typename T, typename U = Int, int N = 1>
int templateFunc(T* pt, U* pu, int n = N);
::::: declaration_pretty
template <typename T, typename U = Int, int N = 1>
int templateFunc(T* pt, U* pu, int n = N);
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:47:5', 'template_spelling': 'templateFunc', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}, {'type': {'spelling': 'U', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:47:5', 'template_spelling': 'templateFunc', 'param_index': 1}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'U', 'default_expr': 'Int'}, {'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'N', 'default_expr': '1'}]
==================
::::: id
example-1.cc#22
::::: spelling
foo
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:50:5
::::: comment
comment for foo()
::::: specifier
[]
::::: from_macro
None
::::: args_list
[{'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'a', 'default_expr': None}, {'type': {'spelling': 'Int', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'Int', 'location': 'example-1.cc:9:26'}, {'spelling': 'std::vector<int>', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28'}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': 24, 'type_alias_underlying_type': 'std::vector<int>', 'canonical_type': {'spelling': 'std::vector<int, std::allocator<int>>', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 24}}}}, 'arg_spelling': 'b', 'default_expr': None}]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int foo(int a, Int b);
::::: declaration_pretty
int foo(int a, Int b);
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#23
::::: spelling
MyClass
::::: kind
constructor
::::: hierarchy
::MyClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:12:7", 
    "spelling": "MyClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:53:10
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: constructor_property
[]
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'a', 'default_expr': None}, {'type': {'spelling': 'Int', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'Int', 'location': 'example-1.cc:9:26'}, {'spelling': 'std::vector<int>', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28'}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': 24, 'type_alias_underlying_type': 'std::vector<int>', 'canonical_type': {'spelling': 'std::vector<int, std::allocator<int>>', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 24}}}}, 'arg_spelling': 'b', 'default_expr': None}]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
MyClass(int a, Int b);
::::: declaration_pretty
MyClass(int a, Int b);
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#24
::::: spelling
NS2
::::: kind
namespace
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:58:11
::::: comment
(none)
==================
::::: id
example-1.cc#25
::::: spelling
templateClass
::::: kind
class_template
::::: hierarchy
::NS2
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:58:11", 
    "spelling": "NS2", 
    "transparent": false
  }
]
::::: parent_kind
namespace
::::: location
example-1.cc:61:7
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: is_template
True
::::: declaration
template <typename T, char C> class templateClass;
::::: declaration_pretty
template <typename T, char C>
class templateClass;
::::: size
None
::::: is_abstract
False
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:61:7', 'template_spelling': 'templateClass', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}, {'type': {'spelling': 'char', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 1}}, 'arg_spelling': 'C', 'default_expr': None}]
==================
::::: id
example-1.cc#26
::::: spelling
t_
::::: kind
field_declaration
::::: hierarchy
::NS2::templateClass
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:58:11", 
    "spelling": "NS2", 
    "transparent": false
  }, 
  {
    "kind": "class_template", 
    "location": "example-1.cc:61:7", 
    "spelling": "templateClass", 
    "transparent": false
  }
]
::::: parent_kind
class_template
::::: location
example-1.cc:62:4
::::: comment
(none)
::::: static_member
False
::::: access
private
::::: type
T
{
  "is_array": false, 
  "is_function": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": true, 
  "type_param_decl_location": {
    "param_index": 0, 
    "template_location": "example-1.cc:61:7", 
    "template_spelling": "templateClass"
  }, 
  "type_size": null
}
::::: POD
False
::::: size
None
==================
::::: id
example-1.cc#27
::::: spelling
c_
::::: kind
field_declaration
::::: hierarchy
::NS2::templateClass
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:58:11", 
    "spelling": "NS2", 
    "transparent": false
  }, 
  {
    "kind": "class_template", 
    "location": "example-1.cc:61:7", 
    "spelling": "templateClass", 
    "transparent": false
  }
]
::::: parent_kind
class_template
::::: location
example-1.cc:63:7
::::: comment
(none)
::::: static_member
False
::::: access
private
::::: type
char
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 1
}
::::: POD
True
::::: size
1
==================
::::: id
example-1.cc#28
::::: spelling
E
::::: kind
enum_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:67:6
::::: comment
(none)
::::: scoped_enum
False
::::: enum_underlying_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
==================
::::: id
example-1.cc#29
::::: spelling
a
::::: kind
enum_constant_declaration
::::: hierarchy
::(E)
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:67:6", 
    "spelling": "E", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:68:2
::::: comment
(none)
::::: enum_value
1
::::: enum_underlying_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
E
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#30
::::: spelling
b
::::: kind
enum_constant_declaration
::::: hierarchy
::(E)
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:67:6", 
    "spelling": "E", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:69:2
::::: comment
(none)
::::: enum_value
2
::::: enum_underlying_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
E
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#31
::::: spelling
customNS
::::: kind
namespace
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:73:11
::::: comment
comment for namespace
==================
::::: id
example-1.cc#32
::::: spelling
foo
::::: kind
function_declaration
::::: hierarchy
::customNS
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }
]
::::: parent_kind
namespace
::::: location
example-1.cc:74:6
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int foo();
::::: declaration_pretty
int foo();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#33
::::: spelling
Class
::::: kind
class_declaration
::::: hierarchy
::customNS
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }
]
::::: parent_kind
namespace
::::: location
example-1.cc:75:8
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: POD
True
::::: is_template
False
::::: declaration
class Class;
::::: declaration_pretty
class Class;
::::: size
8
::::: type
customNS::Class
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 8
}
::::: is_abstract
False
::::: template_args_list
[]
==================
::::: id
example-1.cc#34
::::: spelling
staticGlobal
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:78:12
::::: comment
(none)
::::: type
int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#35
::::: spelling
Class
::::: kind
class_declaration
::::: hierarchy
::customNS
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }
]
::::: parent_kind
namespace
::::: location
example-1.cc:80:17
::::: comment
(none)
::::: specifier
['final']
::::: base_clause
[]
::::: POD
True
::::: is_template
False
::::: declaration
class Class final;
::::: declaration_pretty
class Class final;
::::: size
8
::::: type
customNS::Class
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 8
}
::::: is_abstract
False
::::: template_args_list
[]
==================
::::: id
example-1.cc#36
::::: spelling
staticData
::::: kind
variable_declaration
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:81:13
::::: comment
(none)
::::: static_member
True
::::: access
private
::::: type
int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#37
::::: spelling
constData
::::: kind
field_declaration
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:82:12
::::: comment
(none)
::::: static_member
False
::::: access
private
::::: type
const int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#38
::::: spelling
staticConstData
::::: kind
variable_declaration
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:83:19
::::: comment
(none)
::::: static_member
True
::::: access
private
::::: type
const int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#39
::::: spelling
b
::::: kind
field_declaration
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:84:6
::::: comment
(none)
::::: static_member
False
::::: access
private
::::: type
int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#40
::::: spelling
fooFriend
::::: kind
function_declaration
::::: hierarchy
::customNS
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }
]
::::: parent_kind
namespace
::::: location
example-1.cc:86:12
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int fooFriend();
::::: declaration_pretty
int fooFriend();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#41
::::: spelling
returnSizeT_int
::::: kind
method
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:87:8
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'a', 'default_expr': None}]
::::: access
private
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
size_t returnSizeT_int(int a);
::::: declaration_pretty
size_t returnSizeT_int(int a);
::::: return_type
{'spelling': 'size_t', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'size_t', 'location': '/usr/include/sys/_types/_size_t.h:31:32'}, {'spelling': '__darwin_size_t', 'location': '/usr/include/i386/_types.h:92:24'}, {'spelling': 'unsigned long', 'location': ''}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': 8, 'type_alias_underlying_type': '__darwin_size_t', 'canonical_type': {'spelling': 'unsigned long', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 8}}}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#42
::::: spelling
returnBool_string_myclass_anotherclass
::::: kind
method
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:88:6
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'std::string', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'std::string', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/iosfwd:194:65'}, {'spelling': 'basic_string<char, char_traits<char>, allocator<char>>', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/iosfwd:193:32'}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': None, 'type_alias_underlying_type': 'basic_string<char, char_traits<char>, allocator<char>>', 'canonical_type': {'spelling': 'std::basic_string<char, std::char_traits<char>, std::allocator<char>>', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}}}, 'arg_spelling': 's', 'default_expr': None}, {'type': {'spelling': 'MyClass', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 48}}, 'arg_spelling': 'obj', 'default_expr': None}, {'type': {'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'obj2', 'default_expr': None}]
::::: access
private
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
bool returnBool_string_myclass_anotherclass(string s, MyClass obj, Another obj2);
::::: declaration_pretty
bool returnBool_string_myclass_anotherclass(
	string s,
	MyClass obj,
	Another obj2
);
::::: return_type
{'spelling': 'bool', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 1}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#43
::::: spelling
returnVector_float_vector
::::: kind
method
::::: hierarchy
::customNS::Class
[
  {
    "kind": "namespace", 
    "location": "example-1.cc:73:11", 
    "spelling": "customNS", 
    "transparent": false
  }, 
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:80:17", 
    "spelling": "Class", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:89:19
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: method_property
[]
::::: args_list
[{'type': {'spelling': 'float', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}, 'arg_spelling': 'a', 'default_expr': None}, {'type': {'spelling': 'std::vector<int>', 'type_info': {'is_type_param': False, 'type_alias_chain': [{'spelling': 'std::vector<int>', 'location': '/Library/Developer/CommandLineTools/usr/include/c++/v1/vector:447:28'}], 'is_pointer': False, 'is_function': False, 'is_array': False, 'is_type_alias': True, 'type_size': 24, 'type_alias_underlying_type': '', 'canonical_type': {'spelling': 'std::vector<int, std::allocator<int>>', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 24}}}}, 'arg_spelling': 'b', 'default_expr': None}]
::::: access
private
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
std::vector<int>& returnVector_float_vector(float a, std::vector<int> b);
::::: declaration_pretty
std::vector<int>& returnVector_float_vector(float a, std::vector<int> b);
::::: return_type
{'spelling': 'std::vector<int>&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 24}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#44
::::: spelling
classFriend
::::: kind
class_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:92:7
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: POD
True
::::: is_template
False
::::: declaration
class classFriend;
::::: declaration_pretty
class classFriend;
::::: size
1
::::: type
classFriend
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 1
}
::::: is_abstract
False
::::: template_args_list
[]
==================
::::: id
example-1.cc#45
::::: spelling
fooFriend
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:93:5
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int fooFriend();
::::: declaration_pretty
int fooFriend();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#46
::::: spelling
a1
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:95:5
::::: comment
(none)
::::: type
int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#47
::::: spelling
a2
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:95:10
::::: comment
(none)
::::: type
int*
{
  "is_array": false, 
  "is_function": false, 
  "is_pointer": true, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "pointee_type": {
    "spelling": "int", 
    "type_info": {
      "is_array": false, 
      "is_pointer": false, 
      "is_type_alias": false, 
      "is_type_param": false, 
      "type_size": 4
    }
  }, 
  "type_size": 8
}
::::: POD
True
::::: size
8
==================
::::: id
example-1.cc#48
::::: spelling
m
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:96:20
::::: comment
(none)
::::: type
std::map<int, int>
{
  "canonical_type": {
    "spelling": "std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>>", 
    "type_info": {
      "is_array": false, 
      "is_pointer": false, 
      "is_type_alias": false, 
      "is_type_param": false, 
      "type_size": 24
    }
  }, 
  "is_array": false, 
  "is_function": false, 
  "is_pointer": false, 
  "is_type_alias": true, 
  "is_type_param": false, 
  "type_alias_chain": [
    {
      "location": "/Library/Developer/CommandLineTools/usr/include/c++/v1/map:805:28", 
      "spelling": "std::map<int, int>"
    }
  ], 
  "type_alias_underlying_type": "", 
  "type_size": 24
}
::::: POD
False
::::: size
24
==================
::::: id
example-1.cc#49
::::: spelling
foo
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:98:5
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: args_list
[]
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
int foo();
::::: declaration_pretty
int foo();
::::: return_type
{'spelling': 'int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#50
::::: spelling
ano
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:103:9
::::: comment
(none)
::::: type
int
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#51
::::: spelling
EEClass
::::: kind
struct_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:104:8
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: POD
True
::::: is_template
False
::::: declaration
class EEClass;
::::: declaration_pretty
class EEClass;
::::: size
1
::::: type
EEClass
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 1
}
::::: is_abstract
False
::::: template_args_list
[]
==================
::::: id
example-1.cc#52
::::: spelling
EE
::::: kind
enum_declaration
::::: hierarchy
::EEClass
[
  {
    "kind": "struct_declaration", 
    "location": "example-1.cc:104:8", 
    "spelling": "EEClass", 
    "transparent": false
  }
]
::::: parent_kind
struct_declaration
::::: location
example-1.cc:105:13
::::: comment
(none)
::::: scoped_enum
True
::::: enum_underlying_type
{'spelling': 'char', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 1}}
::::: access
public
==================
::::: id
example-1.cc#53
::::: spelling
ee1
::::: kind
enum_constant_declaration
::::: hierarchy
::EEClass::EE
[
  {
    "kind": "struct_declaration", 
    "location": "example-1.cc:104:8", 
    "spelling": "EEClass", 
    "transparent": false
  }, 
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:105:13", 
    "spelling": "EE", 
    "transparent": false
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:105:25
::::: comment
(none)
::::: enum_value
0
::::: enum_underlying_type
{'spelling': 'char', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 1}}
::::: type
EEClass::EE
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 1
}
::::: POD
True
::::: size
1
==================
::::: id
example-1.cc#54
::::: spelling
ee2
::::: kind
enum_constant_declaration
::::: hierarchy
::EEClass::EE
[
  {
    "kind": "struct_declaration", 
    "location": "example-1.cc:104:8", 
    "spelling": "EEClass", 
    "transparent": false
  }, 
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:105:13", 
    "spelling": "EE", 
    "transparent": false
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:105:30
::::: comment
(none)
::::: enum_value
1
::::: enum_underlying_type
{'spelling': 'char', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 1}}
::::: type
EEClass::EE
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 1
}
::::: POD
True
::::: size
1
==================
::::: id
example-1.cc#55
::::: spelling
eee1
::::: kind
enum_constant_declaration
::::: hierarchy
::(EnumTy)
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:107:9", 
    "spelling": "EnumTy", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:107:16
::::: comment
(none)
::::: enum_value
0
::::: enum_underlying_type
{'spelling': 'unsigned int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
EnumTy
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#56
::::: spelling
eee2
::::: kind
enum_constant_declaration
::::: hierarchy
::(EnumTy)
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:107:9", 
    "spelling": "EnumTy", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:107:22
::::: comment
(none)
::::: enum_value
1
::::: enum_underlying_type
{'spelling': 'unsigned int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
EnumTy
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#57
::::: spelling
EnumTy
::::: kind
typedef_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:107:29
::::: comment
(none)
::::: canonical_type
EnumTy
::::: type_alias_chain:[
  {
    "location": "example-1.cc:107:29", 
    "spelling": "EnumTy"
  }, 
  {
    "location": "example-1.cc:107:9", 
    "spelling": "enum EnumTy"
  }
]
::::: type_alias_underlying_type
enum EnumTy
==================
::::: id
example-1.cc#58
::::: spelling
eee1
::::: kind
enum_constant_declaration
::::: hierarchy
::(EnumTy)
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:107:9", 
    "spelling": "EnumTy", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:107:16
::::: comment
(none)
::::: enum_value
0
::::: enum_underlying_type
{'spelling': 'unsigned int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
EnumTy
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#59
::::: spelling
eee2
::::: kind
enum_constant_declaration
::::: hierarchy
::(EnumTy)
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:107:9", 
    "spelling": "EnumTy", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:107:22
::::: comment
(none)
::::: enum_value
1
::::: enum_underlying_type
{'spelling': 'unsigned int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
EnumTy
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#60
::::: spelling
aaaaa
::::: kind
enum_constant_declaration
::::: hierarchy
::((anonymous enum at example-1.cc:108:1))
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:108:1", 
    "spelling": "(anonymous enum at example-1.cc:108:1)", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:108:8
::::: comment
(none)
::::: enum_value
0
::::: enum_underlying_type
{'spelling': 'unsigned int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
(anonymous enum at example-1.cc:108:1)
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#61
::::: spelling
bbbbb
::::: kind
enum_constant_declaration
::::: hierarchy
::((anonymous enum at example-1.cc:108:1))
[
  {
    "kind": "enum_declaration", 
    "location": "example-1.cc:108:1", 
    "spelling": "(anonymous enum at example-1.cc:108:1)", 
    "transparent": true
  }
]
::::: parent_kind
enum_declaration
::::: location
example-1.cc:108:15
::::: comment
(none)
::::: enum_value
1
::::: enum_underlying_type
{'spelling': 'unsigned int', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 4}}
::::: type
(anonymous enum at example-1.cc:108:1)
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 4
}
::::: POD
True
::::: size
4
==================
::::: id
example-1.cc#62
::::: spelling
BaseClass
::::: kind
class_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:110:7
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: POD
True
::::: is_template
False
::::: declaration
class BaseClass;
::::: declaration_pretty
class BaseClass;
::::: size
1
::::: type
BaseClass
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 1
}
::::: is_abstract
False
::::: template_args_list
[]
==================
::::: id
example-1.cc#63
::::: spelling
BaseClass2
::::: kind
class_template
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:112:8
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: is_template
True
::::: declaration
template <typename T> class BaseClass2;
::::: declaration_pretty
template <typename T>
class BaseClass2;
::::: size
None
::::: is_abstract
False
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:112:8', 'template_spelling': 'BaseClass2', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}]
==================
::::: id
example-1.cc#64
::::: spelling
ClassAgain
::::: kind
class_template
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:114:7
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: is_template
True
::::: declaration
template <typename T> class ClassAgain;
::::: declaration_pretty
template <typename T>
class ClassAgain;
::::: size
None
::::: is_abstract
False
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:114:7', 'template_spelling': 'ClassAgain', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}]
==================
::::: id
example-1.cc#65
::::: spelling
BaseClassWithAVeryUglyName_i_am_really_long_too
::::: kind
class_template
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:116:7
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[]
::::: is_template
True
::::: declaration
template <typename T> class BaseClassWithAVeryUglyName_i_am_really_long_too;
::::: declaration_pretty
template <typename T>
class BaseClassWithAVeryUglyName_i_am_really_long_too;
::::: size
None
::::: is_abstract
False
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:116:7', 'template_spelling': 'BaseClassWithAVeryUglyName_i_am_really_long_too', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}]
==================
::::: id
example-1.cc#66
::::: spelling
TypeDefTemplateBase
::::: kind
typedef_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:118:63
::::: comment
(none)
::::: canonical_type
BaseClassWithAVeryUglyName_i_am_really_long_too<char>
::::: type_alias_chain:[
  {
    "location": "example-1.cc:118:63", 
    "spelling": "TypeDefTemplateBase"
  }, 
  {
    "location": "example-1.cc:116:7", 
    "spelling": "BaseClassWithAVeryUglyName_i_am_really_long_too<char>"
  }
]
::::: type_alias_underlying_type
BaseClassWithAVeryUglyName_i_am_really_long_too<char>
==================
::::: id
example-1.cc#67
::::: spelling
VClass
::::: kind
class_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:120:7
::::: comment
(none)
::::: specifier
['final']
::::: base_clause
[{'access': 'private', 'definition_location': 'example-1.cc:110:7', 'spelling': 'BaseClass', 'virtual_inheritance': False}, {'access': 'public', 'definition_location': 'example-1.cc:112:8', 'spelling': 'BaseClass2<ClassAgain<int>>', 'virtual_inheritance': False}, {'access': 'public', 'definition_location': 'example-1.cc:104:8', 'spelling': 'EEClass', 'virtual_inheritance': True}, {'access': 'protected', 'definition_location': 'example-1.cc:118:63', 'spelling': 'TypeDefTemplateBase', 'virtual_inheritance': False}]
::::: POD
False
::::: is_template
False
::::: declaration
class VClass final;
::::: declaration_pretty
class VClass final;
::::: size
8
::::: type
VClass
{
  "is_array": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 8
}
::::: is_abstract
True
::::: template_args_list
[]
==================
::::: id
example-1.cc#68
::::: spelling
VClass
::::: kind
constructor
::::: hierarchy
::VClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:120:7", 
    "spelling": "VClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:123:5
::::: comment
(none)
::::: specifier
[]
::::: from_macro
None
::::: is_deleted
False
::::: constructor_property
['default']
::::: method_property
[]
::::: args_list
[]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
VClass();
::::: declaration_pretty
VClass();
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#69
::::: spelling
~VClass
::::: kind
destructor
::::: hierarchy
::VClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:120:7", 
    "spelling": "VClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:124:13
::::: comment
(none)
::::: specifier
['= 0']
::::: from_macro
None
::::: is_deleted
False
::::: method_property
['virtual', 'pure_virtual']
::::: args_list
[]
::::: access
public
::::: no_throw_guarantee
unevaluated
::::: is_template
False
::::: destructor_property
['virtual', 'pure_virtual']
::::: declaration
virtual ~VClass() = 0;
::::: declaration_pretty
virtual ~VClass() = 0;
::::: return_type
None
::::: template_args_list
[]
==================
::::: id
example-1.cc#70
::::: spelling
foo
::::: kind
method
::::: hierarchy
::VClass
[
  {
    "kind": "class_declaration", 
    "location": "example-1.cc:120:7", 
    "spelling": "VClass", 
    "transparent": false
  }
]
::::: parent_kind
class_declaration
::::: location
example-1.cc:125:18
::::: comment
(none)
::::: specifier
['= 0']
::::: from_macro
None
::::: is_deleted
False
::::: method_property
['virtual', 'pure_virtual']
::::: args_list
[]
::::: access
public
::::: no_throw_guarantee
not_guaranteed
::::: is_template
False
::::: declaration
virtual void foo() = 0;
::::: declaration_pretty
virtual void foo() = 0;
::::: return_type
{'spelling': 'void', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#71
::::: spelling
TemplateInheritanceChild
::::: kind
class_template
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:129:7
::::: comment
(none)
::::: specifier
[]
::::: base_clause
[{'access': 'public', 'definition_location': 'example-1.cc:112:8', 'spelling': 'BaseClass2<T>', 'virtual_inheritance': False}]
::::: is_template
True
::::: declaration
template <typename T> class TemplateInheritanceChild;
::::: declaration_pretty
template <typename T>
class TemplateInheritanceChild;
::::: size
None
::::: is_abstract
False
::::: template_args_list
[{'type': {'spelling': 'T', 'type_info': {'type_param_decl_location': {'template_location': 'example-1.cc:129:7', 'template_spelling': 'TemplateInheritanceChild', 'param_index': 0}, 'is_function': False, 'is_array': False, 'is_type_alias': False, 'is_type_param': True, 'is_pointer': False, 'type_size': None}}, 'arg_spelling': 'T', 'default_expr': None}]
==================
::::: id
example-1.cc#72
::::: spelling
arrIntPtr
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:131:6
::::: comment
(none)
::::: type
int*[5]
{
  "array_element_type": {
    "spelling": "int*", 
    "type_info": {
      "is_array": false, 
      "is_function": false, 
      "is_pointer": true, 
      "is_type_alias": false, 
      "is_type_param": false, 
      "pointee_type": {
        "spelling": "int", 
        "type_info": {
          "is_array": false, 
          "is_pointer": false, 
          "is_type_alias": false, 
          "is_type_param": false, 
          "type_size": 4
        }
      }, 
      "type_size": 8
    }
  }, 
  "array_size": 5, 
  "is_array": true, 
  "is_function": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 40
}
::::: POD
True
::::: size
40
==================
::::: id
example-1.cc#73
::::: spelling
arrChar
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:132:6
::::: comment
(none)
::::: type
char[6]
{
  "array_element_type": {
    "spelling": "char", 
    "type_info": {
      "is_array": false, 
      "is_pointer": false, 
      "is_type_alias": false, 
      "is_type_param": false, 
      "type_size": 1
    }
  }, 
  "array_size": 6, 
  "is_array": true, 
  "is_function": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": 6
}
::::: POD
True
::::: size
6
==================
::::: id
example-1.cc#74
::::: spelling
arrVar
::::: kind
variable_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:134:11
::::: comment
(none)
::::: type
BaseClass[]
{
  "array_element_type": {
    "spelling": "BaseClass", 
    "type_info": {
      "is_array": false, 
      "is_pointer": false, 
      "is_type_alias": false, 
      "is_type_param": false, 
      "type_size": 1
    }
  }, 
  "array_size": null, 
  "is_array": true, 
  "is_function": false, 
  "is_pointer": false, 
  "is_type_alias": false, 
  "is_type_param": false, 
  "type_size": null
}
::::: POD
True
::::: size
None
==================
::::: id
example-1.cc#75
::::: spelling
returnVoid
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:139:1
::::: comment
(none)
::::: specifier
['noexcept']
::::: from_macro
FUNCS
::::: args_list
[{'type': {'spelling': 'char*&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 8}}, 'arg_spelling': 'in', 'default_expr': None}]
::::: no_throw_guarantee
guaranteed
::::: is_template
False
::::: declaration
FUNCS(returnVoid, char *)
::::: declaration_pretty
FUNCS(returnVoid, char *)
::::: return_type
{'spelling': 'void', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}
::::: template_args_list
[]
==================
::::: id
example-1.cc#76
::::: spelling
returnVoid
::::: kind
function_declaration
::::: hierarchy
(none)
::::: parent_kind
(global)
::::: location
example-1.cc:139:1
::::: comment
(none)
::::: specifier
['noexcept']
::::: from_macro
FUNCS
::::: args_list
[{'type': {'spelling': 'char*&&', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': 8}}, 'arg_spelling': 'in', 'default_expr': None}]
::::: no_throw_guarantee
guaranteed
::::: is_template
False
::::: declaration
FUNCS(returnVoid, char *)
::::: declaration_pretty
FUNCS(returnVoid, char *)
::::: return_type
{'spelling': 'void', 'type_info': {'is_type_param': False, 'is_array': False, 'is_type_alias': False, 'is_pointer': False, 'type_size': None}}
::::: template_args_list
[]
==================
[Diagnostic #1]
example-1.cc:22:10: error: return type 'MyClass' is an abstract class
[Diagnostic #2]
example-1.cc:53:10: error: redefinition of 'MyClass'
[Diagnostic #3]
example-1.cc:88:68: error: unknown type name 'Another'
[Diagnostic #4]
example-1.cc:80:17: warning: class 'Class' does not declare any constructor to initialize its non-modifiable members
[Diagnostic #5]
example-1.cc:103:1: error: unknown type name 'Another'
[Diagnostic #6]
example-1.cc:120:7: warning: abstract class is marked 'final' [-Wabstract-final-class]
[Diagnostic #7]
example-1.cc:134:11: error: definition of variable with array type needs an explicit size or an initializer
[includes]
{'depth': 1, 'included_at': 'example-1.cc:2:10', 'file': '/Library/Developer/CommandLineTools/usr/include/c++/v1/vector'}
{'depth': 1, 'included_at': 'example-1.cc:3:10', 'file': '/Library/Developer/CommandLineTools/usr/include/c++/v1/map'}
{'depth': 1, 'included_at': 'example-1.cc:4:10', 'file': './example-2.h'}
{'depth': 2, 'included_at': './example-2.h:2:10', 'file': '/Library/Developer/CommandLineTools/usr/include/c++/v1/unordered_map'}
[time parsing] 0.18 sec
[time traverse] 1.71 sec
